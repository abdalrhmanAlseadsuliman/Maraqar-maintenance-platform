<?php

namespace App\Filament\Auth;

use Filament\Forms\Form;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\ViewField;
use Filament\Pages\Auth\Login as BaseLogin;
use Illuminate\Validation\ValidationException;

class Login extends BaseLogin
{
    // ุฅุนุฏุงุฏุงุช ุงูุนูุงููู ูุงูุฒุฑ
    protected static ?string $title = 'ุชุณุฌูู ุงูุฏุฎูู';
    protected ?string $heading = 'ุชุณุฌูู ุงูุฏุฎูู';
    protected ?string $subheading = 'ูุฑุญุจุงู ุจูุ ุงูุฑุฌุงุก ุชุณุฌูู ุงูุฏุฎูู ุฅูู ุญุณุงุจู';
    protected ?string $submitButtonLabel = 'ุฏุฎูู';

    // ุชุญุฏูุฏ ุงููุงูุจ ุงููุณุชุฎุฏู
    protected static string $view = 'filament.pages.auth.login';

    // ุจูุงุก ูููุฐุฌ ุชุณุฌูู ุงูุฏุฎูู
    public function form(Form $form): Form
    {
        return $form
            ->schema([
                $this->getLoginFormComponent(),      // ูููู ุฅุฏุฎุงู ุงูุจุฑูุฏ ุฃู ุงููุงุชู
                $this->getPasswordFormComponent(),   // ูููู ุฅุฏุฎุงู ูููุฉ ุงููุฑูุฑ
                $this->getRememberFormComponent(),   // ูููู "ุชุฐูุฑูู"
            ])
            ->statePath('data');
    }

    // ูููู ุฅุฏุฎุงู ุงูุจุฑูุฏ ุฃู ุฑูู ุงููุงุชู
    protected function getLoginFormComponent(): TextInput
    {
        return TextInput::make('login')
            ->label('ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุฃู ุฑูู ุงููุงุชู') // ุชุนุฏูู ุงูุนููุงู ููุบุทู ุงูุญุงูุชูู
            ->placeholder('ุฃุฏุฎู ุจุฑูุฏู ุงูุฅููุชุฑููู ุฃู ุฑูู ูุงุชูู')
            ->required()
            ->autofocus()
            ->autocomplete('username') // ูุณุชุฎุฏูู ุงููุชุตูุญ ูุชุนุจุฆุฉ ุงูุญูู
            ->extraInputAttributes(['tabindex' => 1]);
    }

    // ูููู ุฅุฏุฎุงู ูููุฉ ุงููุฑูุฑ

    protected function getPasswordFormComponent(): TextInput
    {
        return TextInput::make('password')
            ->label('ูููุฉ ุงููุฑูุฑ')
            ->placeholder('ุฃุฏุฎู ูููุฉ ุงููุฑูุฑ')
            ->helperText('๐ ูู ุญุงู ูู ุชูู ุจุชุบููุฑูุงุ ูุฅู ูููุฉ ุงููุฑูุฑ ูู ุฑูู ุงูุจุทุงูุฉ.')
            ->password()
            ->revealable()
            ->required()
            ->autocomplete('current-password')
            ->extraInputAttributes(['tabindex' => 2]);
    }


    // ูููู ุฎูุงุฑ "ุชุฐูุฑูู"
    protected function getRememberFormComponent(): Checkbox
    {
        return Checkbox::make('remember')
            ->label('ุชุฐูุฑูู');
    }

    // ุทุฑููุฉ ุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู
    protected function getCredentialsFromFormData(array $data): array
    {
        // ุชุญุฏูุฏ ุฅุฐุง ูุงูุช ุงููููุฉ ุจุฑูุฏ ุฅููุชุฑููู ุฃู ุฑูู ูุงุชู
        if (filter_var($data['login'], FILTER_VALIDATE_EMAIL)) {
            // ุฅุฐุง ูุงูุช ุงููููุฉ ุจุฑูุฏ ุฅููุชุฑููู
            $loginField = 'email';
        } else {
            // ุฅุฐุง ูุงูุช ุงููููุฉ ุฑูู ูุงุชู (ููุงุญุธุฉ: ููููู ุฅุถุงูุฉ ุชุญูู ุฅุถุงูู ููุง ูู ุฃุฑุฏุช)
            $loginField = 'phone';
        }

        // ุจูุงุก ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู
        return [
            $loginField => $data['login'],
            'password' => $data['password'],
        ];
    }

    // ุชุฎุตูุต ุฑุณุงูุฉ ุงูุฎุทุฃ ุนูุฏ ูุดู ุชุณุฌูู ุงูุฏุฎูู
    protected function throwFailureValidationException(): never
    {
        throw ValidationException::withMessages([
            'data.login' => 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุฃู ุฑูู ุงููุงุชู ุฃู ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ.',
        ]);
    }
}
